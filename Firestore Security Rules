rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // User collection rules
    match /users/{userId} {
      // Logged-in user can read and update their own document
      allow get, update: if request.auth != null && request.auth.uid == userId;

      // National admin can create user documents
      allow create: if request.auth != null && getUser(request.auth.uid).data.role == 'national';

      // National admin can read any specific user document (e.g., for editing)
      allow get: if request.auth != null && getUser(request.auth.uid).data.role == 'national';

      // National admin can delete users (but not themselves)
      allow delete: if request.auth != null && getUser(request.auth.uid).data.role == 'national' && request.auth.uid != userId;
    }

    // Rule for listing all users in the /users collection
    // This is necessary for the User Management page
    match /users {
      allow list: if request.auth != null && getUser(request.auth.uid).data.role == 'national';
    }

    // Regions collection rules
    match /regions/{regionId} {
      // Any authenticated user can read regions
      allow read: if request.auth != null;

      // Only national admin can create, update, or delete regions
      allow create, update, delete: if request.auth != null && getUser(request.auth.uid).data.role == 'national';
    }

    // Branches collection rules
    match /branches/{branchId} {
      // Any authenticated user can read branches
      allow read: if request.auth != null;

      // Rules for creating branches
      allow create: if request.auth != null &&
                      (
                        // National admin can create branches
                        getUser(request.auth.uid).data.role == 'national' ||
                        // Regional managers can create branches within their own region
                        (getUser(request.auth.uid).data.role == 'regional' && request.resource.data.regionId == getUser(request.auth.uid).data.regionId)
                      );

      // Rules for updating or deleting existing branches
      allow update, delete: if request.auth != null &&
                            (
                              // National admin can update/delete any branch
                              getUser(request.auth.uid).data.role == 'national' ||
                              // Regional managers can update/delete branches within their own region
                              (getUser(request.auth.uid).data.role == 'regional' && resource.data.regionId == getUser(request.auth.uid).data.regionId)
                            );
    }

    // Devices collection rules
    match /devices/{deviceId} {
      // Any authenticated user can read devices (you might want to restrict this further based on user's scope)
      allow read: if request.auth != null;

      // Rules for creating devices
      allow create: if request.auth != null &&
                      (
                        // National admin can create devices
                        getUser(request.auth.uid).data.role == 'national' ||
                        // Branch users can create devices within their own branch
                        (getUser(request.auth.uid).data.role == 'branch' && request.resource.data.branchId == getUser(request.auth.uid).data.branchId)
                      );

      // Rules for updating or deleting existing devices
      allow update, delete: if request.auth != null &&
                            (
                              // National admin can update/delete any device
                              getUser(request.auth.uid).data.role == 'national' ||
                              // Branch users can update/delete devices within their own branch
                              (getUser(request.auth.uid).data.role == 'branch' && resource.data.branchId == getUser(request.auth.uid).data.branchId)
                            );
    }

    // Helper function to get user data from Firestore
    function getUser(userId) {
      return get(/databases/$(database)/documents/users/$(userId));
    }
  }
}
